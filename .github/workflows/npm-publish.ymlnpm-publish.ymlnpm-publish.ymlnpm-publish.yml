name: 'NPM Publish - Package Publishing Automation'

# This workflow automates npm package publishing to unlock GitHub package publishing badges
# Triggers on:
# 1. New releases (tags starting with 'v')
# 2. Manual dispatch for testing
# 3. Push to main branch (for package verification)

on:
  # Trigger on new releases
  release:
    types: [published]
  
  # Allow manual trigger for testing
  workflow_dispatch:
    inputs:
      publish_type:
        description: 'Type of publish'
        required: true
        default: 'dry-run'
        type: choice
        options:
          - 'dry-run'
          - 'publish'
  
  # Trigger on push to main branch for verification
  push:
    branches:
      - main
    paths:
      - 'package.json'
      - 'src/**'
      - 'lib/**'
      - 'index.js'

# Set environment variables
env:
  NODE_VERSION: '20.x'
  NPM_REGISTRY: 'https://registry.npmjs.org/'

# Define jobs
jobs:
  # Job 1: Package Quality Checks
  quality-checks:
    name: 'Quality Checks & Testing'
    runs-on: ubuntu-latest
    
    steps:
      - name: 'Checkout Repository'
        uses: actions/checkout@v5
        with:
          fetch-depth: 0
      
      - name: 'Setup Node.js Environment'
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          registry-url: ${{ env.NPM_REGISTRY }}
      
      - name: 'Install Dependencies'
        run: |
          npm ci --prefer-offline --no-audit
          echo "‚úÖ Dependencies installed successfully"
      
      - name: 'Run Linting'
        run: |
          npm run lint
          echo "‚úÖ Linting passed"
      
      - name: 'Run Tests with Coverage'
        run: |
          npm run test
          echo "‚úÖ Tests completed"
      
      - name: 'Security Audit'
        run: |
          npm audit --audit-level=moderate
          echo "‚úÖ Security audit completed"
      
      - name: 'Build Package'
        run: |
          npm run build
          echo "‚úÖ Package build successful"
      
      - name: 'Verify Package Contents'
        run: |
          npm pack --dry-run
          echo "‚úÖ Package verification completed"
  
  # Job 2: NPM Publishing
  npm-publish:
    name: 'Publish to NPM Registry'
    needs: quality-checks
    runs-on: ubuntu-latest
    if: |
      github.event_name == 'release' || 
      (github.event_name == 'workflow_dispatch' && github.event.inputs.publish_type == 'publish')
    
    environment:
      name: npm-production
      url: https://www.npmjs.com/package/github-achievement-unlocker
    
    steps:
      - name: 'Checkout Repository'
        uses: actions/checkout@v5
        with:
          fetch-depth: 0
      
      - name: 'Setup Node.js for Publishing'
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          registry-url: ${{ env.NPM_REGISTRY }}
      
      - name: 'Install Production Dependencies'
        run: |
          npm ci --prefer-offline --no-audit --omit=dev
          echo "‚úÖ Production dependencies installed"
      
      - name: 'Configure NPM Authentication'
        run: |
          echo "//registry.npmjs.org/:_authToken=${{ secrets.NPM_TOKEN }}" > .npmrc
          echo "registry=https://registry.npmjs.org/" >> .npmrc
          echo "access=public" >> .npmrc
          echo "‚úÖ NPM authentication configured"
        env:
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
      
      - name: 'Verify NPM Login'
        run: |
          npm whoami
          echo "‚úÖ NPM authentication verified"
        env:
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
      
      - name: 'Create Production Build'
        run: |
          npm run build
          echo "‚úÖ Production build completed"
      
      - name: 'Publish to NPM Registry'
        run: |
          npm publish --access public
          echo "üöÄ Package published successfully to NPM!"
        env:
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
      
      - name: 'Verify Published Package'
        run: |
          sleep 30  # Wait for package to propagate
          npm info github-achievement-unlocker
          echo "‚úÖ Package publication verified"
        env:
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
  
  # Job 3: GitHub Package Registry (Optional)
  github-packages:
    name: 'Publish to GitHub Packages'
    needs: quality-checks
    runs-on: ubuntu-latest
    if: github.event_name == 'release'
    
    permissions:
      contents: read
      packages: write
    
    steps:
      - name: 'Checkout Repository'
        uses: actions/checkout@v5
      
      - name: 'Setup Node.js for GitHub Packages'
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          registry-url: 'https://npm.pkg.github.com'
          scope: '@galafis'
      
      - name: 'Install Dependencies'
        run: npm ci --prefer-offline --no-audit
      
      - name: 'Update Package Name for GitHub Packages'
        run: |
          sed -i 's/"name": "github-achievement-unlocker"/"name": "@galafis\/github-achievement-unlocker"/' package.json
          echo "‚úÖ Package name updated for GitHub Packages"
      
      - name: 'Build for GitHub Packages'
        run: npm run build
      
      - name: 'Publish to GitHub Packages'
        run: |
          npm publish
          echo "üöÄ Package published to GitHub Packages!"
        env:
          NODE_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  
  # Job 4: Notification and Badges
  post-publish:
    name: 'Post-Publish Notifications'
    needs: [npm-publish, github-packages]
    runs-on: ubuntu-latest
    if: always() && (needs.npm-publish.result == 'success' || needs.github-packages.result == 'success')
    
    steps:
      - name: 'Package Publication Success'
        run: |
          echo "üéâ Package publication workflow completed!"
          echo "üì¶ NPM Status: ${{ needs.npm-publish.result }}"
          echo "üì¶ GitHub Packages Status: ${{ needs.github-packages.result }}"
          echo "üèÜ Achievement Unlocked: Package Publishing Badge!"
      
      - name: 'Create Success Summary'
        run: |
          echo "## üöÄ Package Publishing Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "‚úÖ **Quality Checks**: Passed" >> $GITHUB_STEP_SUMMARY
          echo "üì¶ **NPM Registry**: ${{ needs.npm-publish.result }}" >> $GITHUB_STEP_SUMMARY
          echo "üì¶ **GitHub Packages**: ${{ needs.github-packages.result }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "üèÜ **Achievement Status**: Package Publishing Badge Unlocked!" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### üìä Package Information" >> $GITHUB_STEP_SUMMARY
          echo "- **Package**: github-achievement-unlocker" >> $GITHUB_STEP_SUMMARY
          echo "- **Version**: $(jq -r '.version' package.json 2>/dev/null || echo 'N/A')" >> $GITHUB_STEP_SUMMARY
          echo "- **Registry**: NPM & GitHub Packages" >> $GITHUB_STEP_SUMMARY
          echo "- **Workflow**: ${{ github.workflow }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Trigger**: ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
          
  # Job 5: Dry Run (for testing)
  dry-run:
    name: 'Dry Run - Package Verification'
    needs: quality-checks
    runs-on: ubuntu-latest
    if: |
      github.event_name == 'push' || 
      (github.event_name == 'workflow_dispatch' && github.event.inputs.publish_type == 'dry-run')
    
    steps:
      - name: 'Checkout Repository'
        uses: actions/checkout@v5
      
      - name: 'Setup Node.js for Dry Run'
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: 'Install Dependencies'
        run: npm ci --prefer-offline --no-audit
      
      - name: 'Simulate Package Publishing (Dry Run)'
        run: |
          echo "üîç Running package publication simulation..."
          npm pack --dry-run
          echo "üìã Package contents that would be published:"
          npm publish --dry-run 2>/dev/null || echo "Dry run completed"
          echo "‚úÖ Dry run completed successfully!"
          echo "‚ÑπÔ∏è This was a simulation - no actual publishing occurred"
